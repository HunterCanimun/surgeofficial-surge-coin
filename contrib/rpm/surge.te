policy_module(surge, 1.100.1)

########################################
#
# Declarations
#

type surge_t;
type surge_exec_t;
init_daemon_domain(surge_t, surge_exec_t)

permissive surge_t;

type surge_initrc_exec_t;
init_script_file(surge_initrc_exec_t)

type surge_conf_t;
files_type(surge_conf_t)

type surge_var_lib_t;
files_type(surge_var_lib_t)

type surge_var_run_t;
files_type(surge_var_run_t)

type surge_port_t;
corenet_port(surge_port_t)

########################################
#
# surge local policy
#
allow surge_t self:process { fork };

allow surge_t self:fifo_file rw_fifo_file_perms;
allow surge_t self:unix_stream_socket create_stream_socket_perms;

manage_dirs_pattern(surge_t, surge_conf_t, surge_conf_t)
manage_files_pattern(surge_t, surge_conf_t, surge_conf_t)

manage_dirs_pattern(surge_t, surge_var_lib_t, surge_var_lib_t)
manage_files_pattern(surge_t, surge_var_lib_t, surge_var_lib_t)
files_var_lib_filetrans(surge_t, surge_var_lib_t, { dir file })

manage_dirs_pattern(surge_t, surge_var_run_t, surge_var_run_t)
manage_files_pattern(surge_t, surge_var_run_t, surge_var_run_t)

sysnet_dns_name_resolve(surge_t)
corenet_all_recvfrom_unlabeled(surge_t)

allow surge_t self:tcp_socket create_stream_socket_perms;
corenet_tcp_sendrecv_generic_if(surge_t)
corenet_tcp_sendrecv_generic_node(surge_t)
corenet_tcp_sendrecv_all_ports(surge_t)
corenet_tcp_bind_generic_node(surge_t)

gen_require(`
    type surge_port_t;
')
allow surge_t surge_port_t:tcp_socket name_bind;

gen_require(`
    type surge_port_t;
')
allow surge_t surge_port_t:tcp_socket name_connect;

domain_use_interactive_fds(surge_t)

files_read_etc_files(surge_t)

miscfiles_read_localization(surge_t)

sysnet_dns_name_resolve(surge_t)

allow surge_t surge_exec_t:file execute_no_trans;
allow surge_t self:process setsched;
corecmd_exec_ls(surge_t)
corenet_tcp_connect_http_port(surge_t)
dev_read_urand(surge_t)
fs_getattr_xattr_fs(surge_t)
kernel_read_system_state(surge_t)
